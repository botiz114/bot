import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import (ReplyKeyboardMarkup, KeyboardButton, 
                           InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command

API_TOKEN = "7530716464:AAEEnqZLchL5GGrNYOAocqNpi8-8loaaSbY"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
CHANNEL_USERNAME = "@CorteizProjects"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ username —Ç–≤–æ–µ–≥–æ –∫–∞–Ω–∞–ª–∞
ADMIN_ID = 886103881  # –ó–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π Telegram ID
STICKER_ID = "CAACAgIAAxkBAAEMgApnrNqFHMQqHOPwDMetOA5iK3MXeQACJi4AAguccEj5Jpxf8oKEGDYE"  # –ó–∞–º–µ–Ω–∏ –Ω–∞ ID –Ω—É–∂–Ω–æ–≥–æ —Å—Ç–∏–∫–µ—Ä–∞

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot=bot)

# –°–ø–∏—Å–æ–∫ –æ—Ç–∑—ã–≤–æ–≤
reviews = []

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class AddReviewState(StatesGroup):
    waiting_for_media = State()
    waiting_for_text = State()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üìÑ –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")]],
    resize_keyboard=True
)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
check_subscription_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="check_subscription")]
    ]
)

async def check_subscription(user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(CHANNEL_USERNAME, user_id)
        return member.status in {"member", "administrator", "creator"}
    except Exception:
        return False

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    is_subscribed = await check_subscription(message.from_user.id)
    if not is_subscribed:
        await message.answer(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª @CorteizProjects, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.",
            reply_markup=check_subscription_keyboard
        )
    else:
        await bot.send_sticker(message.chat.id, STICKER_ID)
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã.", reply_markup=main_keyboard)

@dp.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery):
    is_subscribed = await check_subscription(callback.from_user.id)
    if is_subscribed:
        await callback.message.answer("‚úîÔ∏è –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã! –ù–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.")
    else:
        await callback.message.answer("‚ùå –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã. –í—Å—Ç—É–ø–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.")
    await callback.answer()

@dp.message(F.text == "üìÑ –°–º–æ—Ç—Ä–µ—Ç—å –æ—Ç–∑—ã–≤—ã")
async def show_review(message: types.Message):
    if not reviews:
        await message.answer("‚ùå –û—Ç–∑—ã–≤—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.")
        return
    media_files, review_text = reviews[0]
    next_index = 1 % len(reviews)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data=f"show_review_{next_index}")]]
    )
    for media in media_files:
        await message.answer_media_group(media)
    await message.answer(review_text, reply_markup=keyboard)

@dp.callback_query(F.data.startswith("show_review_"))
async def show_next_review(callback: CallbackQuery):
    index = int(callback.data.split("_")[2])
    if not reviews:
        await callback.answer("‚ùå –û—Ç–∑—ã–≤—ã –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", show_alert=True)
        return
    index %= len(reviews)
    media_files, review_text = reviews[index]
    next_index = (index + 1) % len(reviews)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[[InlineKeyboardButton("–°–ª–µ–¥—É—é—â–∏–π", callback_data=f"show_review_{next_index}")]]
    )
    for media in media_files:
        await callback.message.answer_media_group(media)
    await callback.message.answer(review_text, reply_markup=keyboard)

@dp.message(Command("add_review"))
async def add_review_start(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        await message.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤.")
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ –≥–∏—Ñ–∫–∏ –¥–ª—è –æ—Ç–∑—ã–≤–∞ (–¥–æ 3 –º–µ–¥–∏–∞).")
    await state.set_state(AddReviewState.waiting_for_media)

@dp.message(F.content_type.in_({types.ContentType.PHOTO, types.ContentType.VIDEO, types.ContentType.ANIMATION}), state=AddReviewState.waiting_for_media)
async def process_media(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_files = data.get("media_files", [])
    if message.photo:
        media_files.append(types.InputMediaPhoto(message.photo[-1].file_id))
    elif message.video:
        media_files.append(types.InputMediaVideo(message.video.file_id))
    elif message.animation:
        media_files.append(types.InputMediaAnimation(message.animation.file_id))
    if len(media_files) > 3:
        await message.answer("–ú–∞–∫—Å–∏–º—É–º 3 –º–µ–¥–∏–∞! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        return
    await state.update_data(media_files=media_files)
    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∑—ã–≤–∞.")
    await state.set_state(AddReviewState.waiting_for_text)

@dp.message(state=AddReviewState.waiting_for_text)
async def process_text(message: types.Message, state: FSMContext):
    data = await state.get_data()
    media_files = data.get("media_files", [])
    reviews.append((media_files, message.text))
    await message.answer("‚úîÔ∏è –û—Ç–∑—ã–≤ –¥–æ–±–∞–≤–ª–µ–Ω!")
    await state.clear()

async def main():
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())

